comment "//" ;
comment "/*" "*/" ;

Grammar. Grammar ::=
	Preamble "module" "." "exports" "=" "grammar" "(" "{" GrammarBody "}" ")" ";" ;

Preamble. Preamble ::= [ConstDecl] ;

ConstDecl. ConstDecl ::= "const" Id "=" String ;
terminator ConstDecl ";" ;

GrammarBody. GrammarBody ::= Name "," Rules "," Inlines ",";

Inlines. Inlines ::= "inline" ":" "$" "=>" "[" [Inline] "]" ;
InlineSymbol. Inline ::= "$" "." Id;
terminator Inline "," ;

Name. Name ::= "name" ":" String ;
Rules. Rules ::= "rules" ":" "{" [Rule] "}" ;

Rule. Rule ::= Id ":" "$" "=>" Expression ;
terminator Rule "," ;

Choice. Expression ::= "choice" "(" [Expression] ")" ;
Seq. Expression ::= "seq" "(" [Expression] ")" ;
Repeat. Expression ::= "repeat" "(" Expression ")" ;
Repeat1. Expression ::= "repeat1" "(" Expression ")" ;
Optional. Expression ::= "optional" "(" Expression ")" ;
Symbol. Expression ::= "$" "." Id ;
Const. Expression ::= Id ;
Literal. Expression ::= String ;
Regex. Expression ::= RegEx ;
Null. Expression ::= "null" ;
separator Expression "," ;

token Id ((letter | '_') (letter | digit | '_')*) ;
token RegEx ('/' (char - '/')* '/') ;
